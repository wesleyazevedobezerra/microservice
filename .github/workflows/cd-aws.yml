name: CD - Deploy Infra and App AWS

on:
  push:
    branches: [main]

jobs:
  deploy-aws:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: sa-east-1
      EKS_CLUSTER_NAME: eks-terraform

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        run: terraform -chdir=Terraform_AWS init

      - name: Terraform Plan
        run: terraform -chdir=Terraform_AWS plan

      - name: Terraform Apply
        run: terraform -chdir=Terraform_AWS apply -auto-approve

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

      - name: Deploy and Validate
        run: |
          set -e
          trap 'echo "‚ö†Ô∏è Erro detectado. Executando terraform destroy..."; terraform -chdir=Terraform_AWS destroy -auto-approve' ERR

          echo "üîß Aplicando ingress-nginx..."
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/cloud/deploy.yaml
          kubectl rollout status deployment ingress-nginx-controller --namespace ingress-nginx --timeout=120s

          echo "üöÄ Aplicando recursos da aplica√ß√£o..."
          kubectl apply -f Terraform_AWS/K8S/Deployment/cep.yaml
          kubectl apply -f Terraform_AWS/K8S/Service/cep.yaml
          kubectl apply -f Terraform_AWS/K8S/Ingress/cep.yaml

          echo "üîç Validando pods..."
          kubectl get pods -n default
          STATUS=$(kubectl get pods -n default -o jsonpath="{.items[*].status.containerStatuses[*].state.waiting.reason}")
          echo "Pod status: $STATUS"

          if [[ "$STATUS" == *"ErrImagePull"* ]] || [[ "$STATUS" == *"ImagePullBackOff"* ]]; then
            echo "‚ùå Erro ao puxar a imagem. Destruindo infraestrutura..."
            terraform -chdir=Terraform_AWS destroy -auto-approve
            exit 1
          fi

      - name: Check EKS Resources
        run: |
          kubectl get pods -A
          kubectl get deployments -A
          kubectl get services -A
          kubectl get ingress -A
